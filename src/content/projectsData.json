[{"EN":{"name":"Windproof","git":"https://github.com/ShortyLogos/windproof","link":"","shortDescription":"Social Media application made to facilitate household management.","tags":["Javascript","React","NodeJs","MongoDB"],"overview":"A web application that provides households around the world with a centralized environment for simple and pleasant management of household life. From the grocery list to the list of household tasks to keeping accounts, the mission remains the same: to alleviate the mental burden of users.","role":"My role in this project was mostly in the backend and we worked equally on the project's conception and architecture. I've built the database, the REST API architecture and everything that comes with it.","technologies":{"languages":"Javascript, HTML, CSS","frameworks":"Node.js, Express, Socket.IO, Mongoose, NodeMailer, React","databases":"MongoDB","tools":"VS Code, GitHub, Postman"},"description":["I first set up the database, the data models, the data access object (DAO) and the server with the Mongoose and Express.js libraries. I set up an authentication middleware that managed incoming JavaScript Web Tokens (JWT) to verify the identity of the user for authentication and permissions purposes. The next logical step was the implementation of the base of the application with the users, the households, which are groups of users together and the drawers (kind of modules in the application). To invite people to your household, we wanted to integrate email invitations, which was made possible using Nodemailer. I then started setting up the test environment with Postman to be able to tests my API in parallel. I created pre-scripts, collections, and global variables to automate testing as much as possible. I also made sure to document the entire backend with JSDOC to allow not only self-documentation, but also to automatically generate an HTML version of the documentation at the end.","The second big piece was deciding how we were going to handle the creation of drawers and everything that concerns them. To do this, I went with a mix of inheritance, composition, and a \"Factory\" type design pattern. This allowed us to always use the same logic for new modules. Soon enough, the challenge was to make sure that all users see the changes in real-time. To do this, we decided to use web sockets technology with Socket.IO to use their event system to notify everyone that an update had happened. The last element of the project's core to implement was notifications. Since it was not all routes that shared this logic, I had to find a way to simplify the process, and it was with a middleware that I finally did it, but this time, the controllers added relevant information to the request after the response was prepared so that the post-controller middleware could add the custom notifications to the database.","Finally, the last two weeks of the project were used to implement the drawers more specifically and with the structure in place, the process was simple. Since the time still available was limited, we had to limit ourselves to the three most important drawers to be able to present the result during our final presentations, and these drawers were the living room (chat, notifications, household options), checklists (grocery lists, tasks), notes (allowing formatted text entry) and the financial drawer which allowed the management of common debts. The financial drawer required us to set up a graph-type data structure to simplify the management of debts between members and the calculations that follows to simplify the transactions and show the visual representation.","In conclusion, this was an important project for my personal development and the first of such scale allowed me to learn several things. Firstly, the importance of being clear in your code, whether it be naming things, leaving comments, but also the structure of files and the project in general. Finally, the relevance of creating abstraction to easily modularize the work and this allows for easily scaling the application."],"thumbnailUrl":"projects\\windproof\\thumbnail.webp","imgs":["projects\\windproof\\finance-drawer.webp","projects\\windproof\\homepage.webp","projects\\windproof\\list-drawer.webp","projects\\windproof\\lounge-drawer.webp","projects\\windproof\\note-drawer.webp","projects\\windproof\\user-profil.webp"],"video":""},"FR":{"name":"Windproof","git":"https://github.com/ShortyLogos/windproof","link":"","shortDescription":"Application de type réseau social fait pour faciliter la gestion d'un foyer.","tags":["Javascript","React","NodeJs","MongoDB"],"overview":"Une application Web qui offre aux foyers à travers le monde un environnement centralisé permettant une gestion simple et agréable de la vie domestique. De la liste d'épicerie à celle des tâches ménagères en passant par la tenue des comptes, la mission demeure la même : alléger la charge mentale des usagers.","role":"Mon rôle dans ce projet était principalement en Backend et nous avons travaillé à égalité sur la conception et l'architecture du projet. J'ai construit la base de données, l'architecture de l'API REST et tout ce qui vient avec.","technologies":{"languages":"Javascript, HTML, CSS","frameworks":"Node.js, Express, Socket.IO, Mongoose, NodeMailer, React","databases":"MongoDB","tools":"VS Code, GitHub, Postman"},"description":["J'ai d'abord mis en place la base de données, les modèles de données, l'objet d'accès aux données (DAO) et le serveur avec les bibliothèques Mongoose et Express.js. J'ai mis en place un middleware d'authentification qui gérait les jetons JavaScript Web (JWT) entrants pour vérifier l'identité de l'utilisateur à des fins d'authentification et de permissions. La prochaine étape logique était l'implémentation de la base de l'application avec les utilisateurs, les foyers, qui sont des groupes d'utilisateurs ensemble et les tiroirs (sorte de modules dans l'application). Pour inviter des gens à votre foyer, nous voulions intégrer des invitations par courriel, ce qui a été rendu possible en utilisant Nodemailer. J'ai ensuite commencé à mettre en place l'environnement de test avec Postman pour pouvoir tester mon API en parallèle. J'ai créé des scripts préliminaires, des collections et des variables globales pour automatiser les tests autant que possible. J'ai également veillé à documenter l'intégralité du backend avec JSDOC pour permettre non seulement l'autodocumentation, mais également pour générer automatiquement une version HTML de la documentation à la fin.","Le deuxième gros morceau a été de décider comment nous allions gérer la création des tiroirs et tout ce qui les concerne. Pour cela, j'y suis allé avec un mélange d'héritage, de composition et un design pattern de type \"Factory\". Cela nous a permis d'utiliser toujours la même logique pour les nouveaux modules. Rapidement, le défi était de s'assurer que tous les utilisateurs voient les changements en temps réel. Pour cela, nous avons décidé d'utiliser la technologie des web sockets avec Socket.IO pour utiliser leur système d'événement pour avertir tout le monde qu'une mise à jour était arrivée. Le dernier élément du coeur du projet à implémenter était les notifications. Comme ce n'était pas toutes les routes qui partageaient cette logique, j'ai dû trouver un moyen de simplifier le processus, et c'est avec un middleware que j'ai finalement réussi, mais cette fois, les contrôleurs ont ajouté des informations pertinentes à la requête après que la réponse soit préparée de sorte que le middleware post-contrôleur puisse ajouter les notifications personnalisées à la base de données.","Finalement, les deux dernières semaines du projet ont servi à implémenter les tiroirs plus spécifiquement et avec la structure en place, le processus était simple. Comme le temps disponible était limité, nous avons dû nous limiter aux trois tiroirs les plus importants pour pouvoir présenter le résultat lors de nos présentations finales et ces tiroirs étaient le salon (chat, notifications, options du foyer), les listes à cocher (listes d'épiceries, de tâches), les notes (permettant l'entrée de texte formaté) et le tiroir financier qui permettait la gestion des dettes communes. Le tiroir financier nous a demandé de mettre en place une structure de données de type graphe pour simplifier la gestion des dettes entre les membres et les calculs qui en découlent pour simplifier les transactions et montrer la représentation visuelle.","En conclusion, ce fut un projet important pour mon développement personnel et le premier d'une telle envergure m'a permis d'apprendre plusieurs choses. Tout d'abord, l'importance d'être clair dans son code, que ce soit le nom des variables, les commentaires ou encore la structure des fichiers et du projet en général. Enfin, la pertinence de créer de l'abstraction pour facilement modulariser le travail et cela permet de facilement évoluer l'application."],"thumbnailUrl":"projects\\windproof\\thumbnail.webp","imgs":["projects\\windproof\\finance-drawer.webp","projects\\windproof\\homepage.webp","projects\\windproof\\list-drawer.webp","projects\\windproof\\lounge-drawer.webp","projects\\windproof\\note-drawer.webp","projects\\windproof\\user-profil.webp"],"video":""}}]